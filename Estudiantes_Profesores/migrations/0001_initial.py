# Generated by Django 4.1 on 2022-08-24 20:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Nivel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nivel", models.CharField(max_length=150, unique=True)),
                (
                    "color_fondo",
                    models.CharField(max_length=30, verbose_name="color de fondo"),
                ),
                (
                    "color_letra",
                    models.CharField(
                        default="rgb(0,0,0)",
                        max_length=30,
                        verbose_name="color de texto",
                    ),
                ),
            ],
            options={"db_table": "niveles",},
        ),
        migrations.CreateModel(
            name="Profesor",
            fields=[
                (
                    "id",
                    models.CharField(
                        max_length=5, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        max_length=150, verbose_name="nombre del profesor"
                    ),
                ),
                (
                    "cedula",
                    models.CharField(
                        max_length=150, verbose_name="cedula del profesor"
                    ),
                ),
                (
                    "fecha_nacimiento",
                    models.DateField(verbose_name="fecha de nacimiento del profesor"),
                ),
                (
                    "telefono",
                    models.CharField(
                        max_length=10, verbose_name="telefono del profesor"
                    ),
                ),
                (
                    "horarios",
                    models.CharField(
                        max_length=300, verbose_name="horarios del profesor"
                    ),
                ),
                (
                    "trabaja_sabado",
                    models.BooleanField(
                        default=False, verbose_name="el profesor trabaja los sabados"
                    ),
                ),
                ("niveles", models.ManyToManyField(to="Estudiantes_Profesores.nivel")),
            ],
            options={"db_table": "profesores",},
        ),
        migrations.CreateModel(
            name="Estudiante",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "nombre_completo",
                    models.CharField(max_length=150, verbose_name="nombre completo"),
                ),
                (
                    "fecha_nacimiento",
                    models.DateField(verbose_name="fecha de nacimiento"),
                ),
                (
                    "documento",
                    models.CharField(
                        max_length=18, unique=True, verbose_name="numero de documento"
                    ),
                ),
                (
                    "celular",
                    models.CharField(max_length=10, verbose_name="numero de celular"),
                ),
                (
                    "telefono",
                    models.CharField(max_length=10, verbose_name="numero de telefono"),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="correo electronico"
                    ),
                ),
                (
                    "direccion",
                    models.CharField(
                        max_length=500, verbose_name="direccion de residencia"
                    ),
                ),
                (
                    "barrio",
                    models.CharField(
                        max_length=500, verbose_name="barrio de resdencia"
                    ),
                ),
                (
                    "ciudad",
                    models.CharField(
                        max_length=150, verbose_name="ciudad de residencia"
                    ),
                ),
                (
                    "seguro_medico",
                    models.BooleanField(verbose_name="tiene seguro medico"),
                ),
                (
                    "documento_identidad",
                    models.BooleanField(verbose_name="tiene documento de identidad"),
                ),
                (
                    "nombre_completo_acudiente",
                    models.CharField(
                        max_length=150, verbose_name="nombre completo del acudiente"
                    ),
                ),
                (
                    "cedula_acudiente",
                    models.CharField(
                        max_length=18,
                        unique=True,
                        verbose_name="numero de cedula acudiente",
                    ),
                ),
                (
                    "lugar_expedicion_acudiente",
                    models.CharField(
                        max_length=500,
                        verbose_name="lugar de expedicion de la cedula del acudiente",
                    ),
                ),
                (
                    "celular_acudiente",
                    models.CharField(
                        max_length=10, verbose_name="numero de celular acudiente "
                    ),
                ),
                (
                    "email_acudiente",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        verbose_name="correo electronico acudiente",
                    ),
                ),
                (
                    "nombre_contactoE",
                    models.CharField(
                        max_length=10, verbose_name="nombre del contacto de emergencia"
                    ),
                ),
                (
                    "telefono_contactoE",
                    models.CharField(
                        max_length=10,
                        verbose_name="telefono del contacto de emergencia",
                    ),
                ),
                (
                    "relacion_contactoE",
                    models.CharField(
                        max_length=100, verbose_name="relacion con el alumno"
                    ),
                ),
                (
                    "nivel",
                    models.ForeignKey(
                        db_column="nivel_id",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="Estudiantes_Profesores.nivel",
                        verbose_name="nivel del estudiante",
                    ),
                ),
            ],
            options={"db_table": "estudiantes",},
        ),
        migrations.CreateModel(
            name="Establo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "estudiantes",
                    models.ManyToManyField(to="Estudiantes_Profesores.estudiante"),
                ),
                (
                    "profesores",
                    models.ManyToManyField(to="Estudiantes_Profesores.profesor"),
                ),
            ],
            options={"db_table": "establos",},
        ),
    ]
